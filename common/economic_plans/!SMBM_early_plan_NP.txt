# Early AI Necrophage Fanatical Purifier economic plans

@desire = 999

@early_energy = 10
@early_minerals = 30
@early_food = 10
@early_consumer_goods_target = 15

@early_energy_minimum = 1
@early_minerals_minimum = 20
@early_food_minimum = 10

@early_lithoid_minerals = 40
@early_lithoid_minerals_minimum = 30

@early_minerals_danger_monthly = 15
@early_minerals_danger_stockpile = 500

# Stage 2
@early_research_target = 30
@early_unity_target = 20

# Stage 3
@early_alloys_target = 25

# Building up alloys and minerals to try and kill someone
early_economy_plan_np = {
	income = {
		energy = @early_energy
		minerals = @early_minerals
		unity = 10
	}
	
	focus = {
		energy = @early_energy_minimum
		minerals = @early_minerals_minimum
	}

	subplan = {
		# The AI can actually starve itself with Necrophage Lithoid because it expands so fast
		set_name = "lithoid minerals"
		potential = {
			is_lithoid_empire = yes
			has_monthly_income = { resource = minerals value >= @early_minerals_danger_monthly }
			resource_stockpile_compare = { resource = minerals value >= @early_minerals_danger_stockpile }
		}

		income = {
			minerals = @early_lithoid_minerals
		}
		
		focus = {
			minerals = @early_lithoid_minerals_minimum
		}
	}

	subplan = {
		# When the AI gets so low on minerals that it simply cannot function
		set_name = "emergency minerals"
		potential = {
			has_monthly_income = { resource = minerals value < @early_minerals_danger_monthly }
			resource_stockpile_compare = { resource = minerals value < @early_minerals_danger_stockpile }
		}

		income = {
			minerals = @desire
		}
		
		focus = {
			minerals = @desire
		}
	}

	subplan = {
		set_name = "base food"
		potential = {
			OR = {
				country_uses_food = yes
			}
		}

		income = {
			food = @early_food
		}
		
		focus = {
			food = @early_food_minimum
		}
	}

	subplan = {
		set_name = "base consumer goods"
		potential = {
			country_uses_consumer_goods = yes
			has_monthly_income = { resource = minerals value > @early_minerals_danger_monthly }
			resource_stockpile_compare = { resource = minerals value > @early_minerals_danger_stockpile }
		}

		income = {
			consumer_goods = @early_consumer_goods_target
		}
		
		focus = {
			consumer_goods = @early_consumer_goods_target
		}
	}
	
	subplan = {
		set_name = "science strong desire"
		potential = {
			has_monthly_income = { resource = energy value > @early_energy_minimum }
			has_monthly_income = { resource = minerals value > @early_minerals_minimum }
			OR = {
				country_uses_food = no
				has_monthly_income = { resource = food value > @early_food_minimum }
			}
			OR = {
				country_uses_consumer_goods = no
				has_monthly_income = { resource = consumer_goods value >= @early_consumer_goods_target }
			}
			OR = {
				has_monthly_income = { resource = physics_research value <= @early_research_target }
				has_monthly_income = { resource = society_research value <= @early_research_target }
				has_monthly_income = { resource = engineering_research value <= @early_research_target }
			}
		}
		# Force it to build a science building! Only a science building can build physics :P
		# This seems to make it build a science building even if a dreadcamp, which has high 
		# physics is available. Adding the other types such as society and engineering can cause
		# the AI to not focus on science buildings because it will try to build temples or monuments
		# or if it has master craft civic it will build Civilian industries. Once it has built these
		# non-science buildings the weights decrease and on top of that the precious starting building
		# slots are gone, thus putting us further from the ultimate goal of building a science building.
		income = {
			physics_research = @desire
		}
		focus = {
			physics_research = @desire
		}
	}
	
	subplan = {
		set_name = "unity strong desire"
		potential = {
			has_monthly_income = { resource = energy value > @early_energy_minimum }
			has_monthly_income = { resource = minerals value > @early_minerals_minimum }
			OR = {
				country_uses_food = no
				has_monthly_income = { resource = food value > @early_food_minimum }
			}
			OR = {
				country_uses_consumer_goods = no
				has_monthly_income = { resource = consumer_goods value >= @early_consumer_goods_target }
			}
			has_monthly_income = { resource = physics_research value > @early_research_target }
			has_monthly_income = { resource = society_research value > @early_research_target }
			has_monthly_income = { resource = engineering_research value > @early_research_target }
			has_monthly_income = { resource = unity value <= @early_unity_target }
		}

		income = {
			unity = @desire
		}
		focus = {
			unity = @desire
		}
	}
	
	subplan = {
		set_name = "alloys strong desire"
		potential = {
			has_monthly_income = { resource = energy value > @early_energy_minimum }
			has_monthly_income = { resource = minerals value > @early_minerals_minimum }
			OR = {
				country_uses_food = no
				has_monthly_income = { resource = food value > @early_food_minimum }
			}
			OR = {
				country_uses_consumer_goods = no
				has_monthly_income = { resource = consumer_goods value >= @early_consumer_goods_target }
			}
		}
		income = {
			alloys = @desire
		}
		focus = {
			alloys = @desire
		}
	}
	
	empire_size = 1.5 #admin cap is fine with being 50% over limit
	
	
	ai_weight = {
		weight = 3
		modifier = {
			factor = 0
			OR = {
				NOT = {
					has_origin = origin_necrophage
				}
				NOT = {
					has_civic = civic_fanatic_purifiers
				}
			}
		}
		modifier = {
			factor = 0
			has_monthly_income = { resource = alloys value > @early_alloys_target }
			has_monthly_income = { resource = physics_research value > @early_research_target }
			has_monthly_income = { resource = society_research value > @early_research_target }
			has_monthly_income = { resource = engineering_research value > @early_research_target }
			has_monthly_income = { resource = unity value > @early_unity_target }
		}
	}
}